using System.Collections.Concurrent;
using System.Diagnostics;

namespace PrimeNumbers
{
    class Program
    {
        static void Main(string[] args)
        {
            int[] lohi = { 6997901, 6997927, 6997937, 6997967, 6998009, 6998029, 6998039, 6998051, 6998053 };
            int[] hihi = { 2000003, 2000029, 2000039, 2000081, 2000083, 2000093, 2000107, 2000113, 2000143,
                           2000147, 2000153, 2000177, 2000209, 2000221, 2000227, 2000249, 2000261, 2000269, 
                           2000281, 2000291, 2000293, 2000303, 2000309, 2000321, 2000329, 2000351, 2000353, 
                           2000371, 2000381, 2000387, 2000389, 2000393, 2000413, 2000417, 2000423, 2000429, 
                           2000447, 2000497, 2000503, 2000519, 2000521, 2000539, 2000573, 2000597, 2000629, 
                           2000633, 2000639, 2000653, 2000659, 2000671, 2000689, 2000693, 2000699, 2000717, 
                           2000731, 2000753, 2000767, 2000807, 2000813, 2000863, 2000903, 2000927, 2000939, 
                           2000941, 2000953, 2000959, 2000963, 2000969, 2000989, 2001037, 2001049, 2001067,
                           2001073, 2001079, 2001101, 2001127, 2001163, 2001179, 2001191, 2001199, 2001211, 
                           2001229, 2001247, 2001269, 2001281, 2001313, 2001331, 2001347, 2001353, 2001361, 
                           2001371, 2001397, 2001407, 2001409, 2001413, 2001421, 2001449, 2001451, 2001463, 
                           2001469, 2001481, 2001487, 2001509, 2001511, 2001533, 2001539, 2001541, 2001547, 
                           2001553, 2001581, 2001583, 2001611, 2001617, 2001619, 2001641, 2001653, 2001673, 
                           2001677, 2001691, 2001697, 2001709, 2001721, 2001731, 2001751, 2001787, 2001793, 
                           2001799, 2001809, 2001833, 2001847, 2001911, 2001919, 2001953, 2001977, 2001997, 
                           2002001, 2002009, 2002019, 2002061, 2002079, 2002093, 2002151, 2002157, 2002159, 
                           2002199, 2002207, 2002211, 2002223, 2002229, 2002249, 2002267, 2002289, 2002303, 
                           2002307, 2002313, 2002327, 2002331, 2002333, 2002337, 2002339, 2002349, 2002361, 
                           2002373, 2002387, 2002397, 2002417, 2002453, 2002459, 2002471, 2002523, 2002531, 
                           2002547, 2002577, 2002579, 2002603, 2002607, 2002613, 2002621, 2002643, 2002661, 
                           2002667, 2002669, 2002673, 2002681, 2002723, 2002739, 2002747, 2002783, 2002799, 
                           2002807, 2002823, 2002829, 2002841, 2002853, 2002867, 2002877, 2002883, 2002907,
                           2002919, 2002927, 2002937, 2002939, 2002967, 2002969, 2002993, 2002997, 2003009, 
                           2003011, 2003021, 2003033, 2003051, 2003081, 2003083, 2003087, 2003119, 2003149, 
                           2003153, 2003159, 2003191, 2003201, 2003213, 2003237, 2003257, 2003269, 2003273, 
                           2003279, 2003299, 2003321, 2003329, 2003359, 2003363, 2003381, 2003387, 2003411, 
                           2003447, 2003459, 2003471, 2003483, 2003497, 2003509, 2003557, 2003591, 2003593, 
                           2003597, 2003611, 2003621, 2003627, 2003633, 2003641, 2003647, 2003653, 2003663, 
                           2003669, 2003681, 2003723, 2003741, 2003753, 2003761, 2003767, 2003801, 2003803, 
                           2003819, 2003839, 2003857, 2003861, 2003863, 2003879, 2003917, 2003927, 2003951, 
                           2003959, 2003971, 2003999, 2004001, 2004007, 2004017, 2004029, 2004043, 2004049, 
                           2004073, 2004083, 2004091, 2004097, 2004109, 2004131, 2004133, 2004137, 2004209, 
                           2004227, 2004251, 2004269, 2004271, 2004293, 2004313, 2004341, 2004347, 2004349, 
                           2004377, 2004383, 2004421, 2004433, 2004461, 2004463, 2004479, 2004511, 2004529, 
                           2004539, 2004559, 2004571, 2004577, 2004593, 2004601, 2004631, 2004641, 2004647, 
                           2004661, 2004679, 2004701, 2004713, 2004719, 2004731, 2004757, 2004763, 2004773,
                           2004787, 2004791, 2004803, 2004809, 2004811, 2004817, 2004829, 2004833, 2004839, 
                           2004851, 2004881, 2004901, 2004911, 2004917, 2004931, 2004943, 2004953, 2004983, 
                           2004991, 2010017, 2010023, 2010031, 2010037, 2010053, 2010061, 2010083, 2010089, 
                           2010103, 2010137, 2010139, 2010161, 2010167, 2010187, 2010191, 2010221, 2010227, 
                           2010241, 2010289, 2010299, 2010311, 2010317, 2010329, 2010341, 2010373, 2010389, 
                           2010397, 2010401, 2010413, 2010431, 2010439, 2010451, 2010467, 2010479, 2010527, 
                           2010553, 2010559, 2010571, 2010581, 2010583, 2010601, 2010611, 2010647, 2010653, 
                           2010667, 2010677, 2010689, 2010703, 2010721, 2010727, 2010733, 2010881, 2010887, 
                           2010893, 2010901, 2010923, 2010929, 2010971, 2010973, 2010977, 2011003, 2011019, 
                           2011021, 2011027, 2011033, 2011057, 2011069, 2011073, 2011081, 2011099, 2011111, 
                           2011123, 2011127, 2011129, 2011147, 2011171, 2011183, 2011193, 2011199, 2011201, 
                           2011211, 2011241, 2011259, 2011267, 2011277, 2011291, 2011309, 2011333, 2011363, 
                           2011381, 2011391, 2011393, 2011409, 2011417, 2011439, 2011441, 2011483, 2011507, 
                           2011517, 2011531, 2011543, 2011561, 2011573, 2011591, 2011601, 2011613, 2011631, 
                           2011637, 2011657, 2011673, 2011697, 2011699, 2011703, 2011733, 2011753, 2011769, 
                           2011799, 2011811, 2011843, 2011861, 2011897, 2011903, 2011907, 2011913, 2011939, 
                           2011951, 2011957, 2011973, 2011987, 2012009, 2012011, 2012027, 2012033, 2012047, 
                           2012057, 2012083, 2012093, 2012113, 2012123, 2012147, 2012159, 2012161, 2012167, 
                           2012173, 2012189, 2012203, 2012221, 2012237, 2012243, 2012287, 2012299, 2012317, 
                           2012323, 2012333, 2012363, 2012371, 2012383, 2012401, 2012407, 2012419, 2012429, 
                           2012447, 2012449, 2012471, 2012519, 2012531, 2012533, 2012597, 2012611, 2012639, 
                           2012641, 2012657, 2012663, 2012671, 2012677, 2012693, 2012711, 2012713, 2012719, 
                           2012741, 2012743, 2012767, 2012789, 2012807, 2012819, 2012821, 2012827, 2012839, 
                           2012849, 2012893, 2012909, 2012951, 2012957, 2012971, 2013001, 2013013, 2013019, 
                           2013023, 2013043, 2013049, 2013071, 2013079, 2013083, 2013101, 2013113, 2013119, 
                           2013127, 2013163, 2013169, 2013173, 2013181, 2013197, 2013227, 2013229, 2013241, 
                           2013247, 2013251, 2013287, 2013289, 2013299, 2013301, 2013307, 2013313, 2013329, 
                           2013337, 2013343, 2013359, 2013367, 2013371, 2013377, 2013391, 2013409, 2013439, 
                           2013457, 2013491, 2013511, 2013533, 2013541, 2013553, 2013589, 2013593, 2013617, 
                           2013619, 2013653, 2013659, 2013679, 2013703, 2013707, 2013709, 2013721, 2013727,
                           2013743, 2013749, 2013751, 2013757, 2013761, 2013779, 2013787, 2013821, 2013833, 
                           2013859, 2013877, 2013889, 2013899, 2013911, 2013923, 2013937, 2013941, 2013967, 
                           2013983, 2013989, 2014009, 2014013, 2014027, 2014031, 2014049, 2014069, 2014081, 
                           2014097, 2014099, 2014121, 2014127, 2014139, 2014141, 2014147, 2014151, 2014157, 
                           2014183, 2014193, 2014213, 2014217, 2014219, 2014231, 2014237, 2014267, 2014277, 
                           2014283, 2014297, 2014301, 2014303, 2014333, 2014351, 2014357, 2014379, 2014393, 
                           2014423, 2014457, 2014459, 2014471, 2014487, 2014499, 2014511, 2014549, 2014553, 
                           2014559, 2014567, 2014591, 2014603, 2014609, 2014643, 2014651, 2014657, 2014667, 
                           2014697, 2014709, 2014723, 2014729, 2014739, 2014759, 2014763, 2014799, 2014801, 
                           2014811, 2014813, 2014819, 2014853, 2014861, 2014867, 2014877, 2014889, 2014897, 
                           2014919, 2014921, 2014939, 2014951, 2014967, 2014979, 2014997 };

            for(int i = 0; i < 10; i++)
            {
                MultiThread(i+1, hihi);
            }
            

            Paralleli(hihi);

            DefaultCheck(hihi);
        }

        static ConcurrentBag<int> bag = null;
        static private bool result;

        public static void DefaultCheck(int[] nums)
        {
            Stopwatch stopWatch = new Stopwatch();
            stopWatch.Start();
            foreach (int num in nums)
            {
                //Console.WriteLine(num);
                IsPrime(num);
            }
            stopWatch.Stop();
            Console.WriteLine("Линнейный метод: " + stopWatch.Elapsed);
        }

        public static bool MultiThread(int threadsCount, int[] numbers)
        {
            
                Stopwatch[] stopwatches = new Stopwatch[threadsCount];
                Thread[] threads = new Thread[threadsCount];
                bag = new ConcurrentBag<int>(numbers);
                Stopwatch stopWatch = new Stopwatch();
                stopWatch.Start();
                for (int i = 0; i < threadsCount; i++)
                {
                    threads[i] = new Thread(PrimeCheck);
                    threads[i].Start();
                }
                for (int i = 0; i < threadsCount; i++)
                {
                  
                    threads[i].Join();
                }

               

                stopWatch.Stop();
                Console.WriteLine("Количество потоков:" +threadsCount+ " Время работы: " + stopWatch.Elapsed);
                return result;
            
        }

        static bool Paralleli(int[] nums)
        {
            var primeNumbers = new ConcurrentBag<int>();
            Stopwatch stopWatch = new Stopwatch();
            stopWatch.Start();
            ParallelLoopResult result =
            Parallel.ForEach(nums, (num, pls) =>
            {
                if (num > 1)
                {
                    for (int i = 2; i < num; i++)
                        if (num % i == 0)
                            pls.Break();
                }
            });
            stopWatch.Stop();
            Console.WriteLine("Параллели: " + stopWatch.Elapsed);
            return !result.IsCompleted;
        }

        public static bool IsPrime(int n)
        {
            if (n > 1)
            {
                for (int i = 2; i < n; i++)
                    if (n % i == 0)
                        return false;
                return true;
            }
            else
                return false;
        }

        static void PrimeCheck()
        {

            while (bag.TryTake(out int number) && !result)
            {
                if (!IsPrime(number))
                {
                    result = true;
                }
                //Console.WriteLine(result);
            }

        }
    }
}